---
description: "PAELLADOC is an AI-powered interactive documentation system that uses natural language conversations to gather, generate and maintain project documentation."
globs: ["**/*"]
alwaysApply: true
imports:
  - ".cursor/rules/imports.mdc"
  - ".cursor/rules/core/commands.mdc"
  - ".cursor/rules/core/verification.mdc"
  - ".cursor/rules/core/help.mdc"
  - ".cursor/rules/core/memory_management.mdc"
  - ".cursor/rules/features/templates.mdc"
  - ".cursor/rules/features/project_memory.mdc"
  - ".cursor/rules/features/coding_styles.mdc"
  - ".cursor/rules/features/git_workflows.mdc"
  - ".cursor/rules/features/code_generation.mdc"
  - ".cursor/rules/features/product_management.mdc"
---
---
description: PAELLA DOC - MECE Documentation System
globs: ["**/*"]
alwaysApply: true
commands:
  PAELLA:
    description: "Initiates the documentation process and generates Cursor rules"
    action: "initiate_documentation"
    args:
      - name: "project_name"
        type: "string"
        description: "Name of the project to document"
        required: false
      - name: "project_type"
        type: "string"
        description: "Type of project to document"
        enum: ["frontend", "backend", "chrome_extension", "fullstack", "mobile_app"]
        default: "frontend"
      - name: "methodologies"
        type: "array"
        description: "Development methodologies to apply"
        items:
          type: "string"
          enum: ["tdd", "github_workflow"]
        default: []
      - name: "git_workflow"
        type: "string"
        description: "Git workflow style to use"
        enum: ["github_flow", "gitflow", "trunk_based", "no_workflow"]
        default: "github_flow"
      - name: "generate_rules"
        type: "boolean"
        description: "Whether to generate Cursor rules from documentation"
        default: true
      - name: "ai_mode"
        type: "string"
        description: "AI operation mode"
        enum: ["autonomous", "collaborative", "advisory"]
        default: "collaborative"
      - name: "help"
        type: "boolean"
        description: "Display help information about available commands"
        default: false
        flag: "-help"
    behavior:
      conversation_required: true
      auto_documentation: false
      conversation_flow: "main_conversation"
      wait_for_user_confirmation: true
      prevent_automatic_generation: true
      allow_minimal_mode: true
  HELP:
    description: "Displays help information about available PAELLADOC commands"
    action: "display_help"
    args:
      - name: "command"
        type: "string"
        description: "Specific command to get help for. If not provided, shows all commands."
        required: false
      - name: "format"
        type: "string"
        description: "Output format for help information"
        enum: ["detailed", "summary", "examples"]
        default: "detailed"
  CONTINUE:
    description: "Continues with an existing project documentation"
    action: "continue_documentation"
    args:
      - name: "project_name"
        type: "string"
        description: "Name of the project to continue with"
        required: true
      - name: "update_rules"
        type: "boolean"
        description: "Whether to update Cursor rules from documentation"
        default: true
      - name: "sync_templates"
        type: "boolean"
        description: "Whether to synchronize templates with current state"
        default: true
  ACHIEVEMENT:
    description: "Records an achievement in the project memory"
    action: "record_achievement"
    args:
      - name: "description"
        type: "string"
        description: "Description of the achievement"
        required: true
      - name: "category"
        type: "string"
        description: "Category of the achievement"
        enum: ["architecture", "development", "documentation", "testing", "security", "performance", "product", "design", "research"]
        required: true
      - name: "impact_level"
        type: "string"
        description: "Level of impact of the achievement"
        enum: ["high", "medium", "low"]
        default: "medium"
  ISSUE:
    description: "Records an issue in the project memory"
    action: "record_problem"
    args:
      - name: "description"
        type: "string"
        description: "Description of the issue"
        required: true
      - name: "severity"
        type: "string"
        description: "Severity level of the issue"
        enum: ["critical", "high", "medium", "low"]
        required: true
      - name: "area"
        type: "string"
        description: "Area affected by the issue"
        enum: ["product", "technical", "process", "security", "performance"]
        required: true
  DECISION:
    description: "Records a technical decision in the project memory"
    action: "record_decision"
    args:
      - name: "description"
        type: "string"
        description: "Description of the decision"
        required: true
      - name: "impact"
        type: "array"
        description: "Areas impacted by the decision"
        items:
          type: "string"
          enum: ["architecture", "development", "documentation", "testing", "security", "performance", "product", "design", "process"]
        required: true
      - name: "rationale"
        type: "string"
        description: "Reasoning behind the decision"
        required: true
  MEMORY:
    description: "Shows the development record"
    action: "show_memory"
    args:
      - name: "filter"
        type: "string"
        description: "Filter memory by category"
        enum: ["all", "achievements", "issues", "decisions", "product", "technical"]
        default: "all"
      - name: "format"
        type: "string"
        description: "Output format"
        enum: ["detailed", "summary", "timeline"]
        default: "detailed"
  CODING_STYLE:
    description: "Manages programming style guides for the project"
    action: "manage_coding_style"
    args:
      - name: "operation"
        type: "string"
        description: "Style operation to perform"
        enum: ["apply", "customize", "list", "show"]
        required: true
      - name: "style_name"
        type: "string"
        description: "Name of the style"
        enum: ["frontend", "backend", "chrome_extension", "tdd", "github_workflow"]
        required: true
      - name: "project_name"
        type: "string"
        description: "Name of the project to apply style to"
        required: true
      - name: "customizations"
        type: "string"
        description: "Path to customization file or inline JSON customizations"
        required: false
  WORKFLOW:
    description: "Manages Git workflow methodology for the project"
    action: "manage_git_workflow"
    args:
      - name: "operation"
        type: "string"
        description: "Workflow operation to perform"
        enum: ["apply", "customize", "list", "show"]
        required: true
      - name: "workflow_name"
        type: "string"
        description: "Name of the Git workflow"
        enum: ["github_flow", "gitflow", "trunk_based", "no_workflow"]
        required: true
      - name: "project_name"
        type: "string"
        description: "Name of the project to apply workflow to"
        required: true
      - name: "customizations"
        type: "string"
        description: "Path to customization file or inline JSON customizations"
        required: false
  VERIFY:
    description: "Verifies an information source"
    action: "verify_source"
    args:
      - name: "source"
        type: "string"
        description: "URL or reference of the source to verify"
        required: true
      - name: "type"
        type: "string"
        description: "Type of source"
        enum: ["academic", "technical", "blog", "documentation", "market_research", "user_research"]
        required: true
      - name: "reliability"
        type: "string"
        description: "Required reliability level"
        enum: ["high", "medium", "low"]
        default: "high"
  GENERATE_RULES:
    description: "Generates or updates Cursor rules from documentation"
    action: "generate_cursor_rules"
    args:
      - name: "project_name"
        type: "string"
        description: "Name of the project"
        required: true
      - name: "rule_type"
        type: "array"
        description: "Types of rules to generate"
        items:
          type: "string"
          enum: ["product", "technical", "process", "security", "all"]
        default: ["all"]
  TEMPLATE:
    description: "Manages documentation templates"
    action: "manage_templates"
    args:
      - name: "operation"
        type: "string"
        description: "Template operation to perform"
        enum: ["create", "update", "delete", "list", "sync"]
        required: true
      - name: "template_type"
        type: "string"
        description: "Type of template"
        enum: ["product", "technical", "process", "simplified"]
        required: true
      - name: "template_name"
        type: "string"
        description: "Name of the template"
        required: false
  RESEARCH:
    description: "Manages research and definition documentation"
    action: "manage_research"
    args:
      - name: "operation"
        type: "string"
        description: "Research operation to perform"
        enum: ["create", "update", "delete", "list", "show"]
        required: true
      - name: "research_type"
        type: "string"
        description: "Type of research"
        enum: ["market_research", "user_research", "competitive_analysis", "technology_assessment"]
        required: true
      - name: "project_name"
        type: "string"
        description: "Name of the project"
        required: true
  GENERATE_CODE:
    description: "Generates code based on completed documentation"
    action: "generate_code"
    args:
      - name: "project_name"
        type: "string"
        description: "Name of the project to generate code for"
        required: true
      - name: "output_path"
        type: "string"
        description: "Path where generated code will be stored (can be a different repository)"
        required: true
      - name: "code_type"
        type: "string"
        description: "Type of code to generate"
        enum: ["frontend", "backend", "full_stack", "extension", "library"]
        default: "full_stack"
      - name: "language"
        type: "string"
        description: "Primary language to use"
        enum: ["javascript", "typescript", "python", "java", "ruby", "go", "php"]
        default: "typescript"
      - name: "style_guide"
        type: "string"
        description: "Style guide to follow for code generation"
        required: false
      - name: "include_tests"
        type: "boolean"
        description: "Whether to generate tests for the code"
        default: true
      - name: "github_repo"
        type: "string"
        description: "Optional GitHub repository to create/push to"
        required: false
      - name: "methodologies"
        type: "array"
        description: "Development methodologies to apply"
        items:
          type: "string"
          enum: ["tdd", "bdd", "scrum", "ci", "pair"]
        required: true
      - name: "git_workflow"
        type: "string"
        description: "Git workflow style to use"
        enum: ["github_flow", "gitflow", "trunk_based", "no_workflow"]
        required: true
    behavior:
      documentation_first: true
      auto_extract: true
      extract_from:
        - "project_memory"
        - "architecture_documents"
        - "api_specifications"
        - "component_specs"
        - "data_models"
      fallback_to_conversation: true
    conversation_flow:
      enabled: true
      required: true
      adaptive: true
      steps:
        - step: "project_verification"
          required_params: ["project_name", "output_path"]
          message: "Verifying project information and output path"
          extract_from: ["project_memory"]
        - step: "methodology_selection"
          required_params: ["methodologies"]
          message: "Selecting development methodologies"
          extract_from: ["project_memory", "architecture_documents"]
        - step: "git_workflow_selection"
          required_params: ["git_workflow"]
          message: "Selecting Git workflow"
          extract_from: ["project_memory"]
        - step: "language_tech_stack"
          required_params: ["language", "code_type"]
          message: "Verifying language and technology stack"
          extract_from: ["project_memory", "architecture_documents"]
        - step: "testing_strategy"
          required_params: ["include_tests"]
          message: "Defining testing strategy"
          extract_from: ["project_memory", "architecture_documents"]
        - step: "repository_management"
          required_params: ["github_repo"]
          message: "Configuring repository management"
          extract_from: ["project_memory"]
  CREATE_REPO:
    description: "Creates a new repository for generated code"
    action: "create_repository"
    args:
      - name: "repo_name"
        type: "string"
        description: "Name of the repository to create"
        required: true
      - name: "repo_type"
        type: "string"
        description: "Type of repository"
        enum: ["github", "gitlab", "local"]
        default: "github"
      - name: "visibility"
        type: "string"
        description: "Repository visibility"
        enum: ["public", "private"]
        default: "private"
      - name: "include_ci"
        type: "boolean"
        description: "Whether to include CI/CD configuration"
        default: true
      - name: "license"
        type: "string"
        description: "License to use"
        enum: ["MIT", "Apache-2.0", "GPL-3.0", "BSD-3-Clause", "None"]
        default: "MIT"
---
{
    "version": 1,
    "name": "PAELLADOC-rules",
    "description": "PAELLA DOC Documentation System with Dynamic Cursor Rules Generation",
    "patterns": ["**/*"],
    "template_system": {
        "base_paths": {
            "product": ".cursor/rules/templates/Product",
            "simplified": ".cursor/rules/templates/simplified_templates",
            "generated": ".cursor/rules/templates/generated"
        },
        "product_templates": {
            "research_and_definition": {
                "00_index.md": "Project index and overview",
                "01_market_research.md": "Market research template",
                "01_project_definition.md": "Initial project definition",
                "02_user_research.md": "User research methodology",
                "02_technical_architecture.md": "Technical architecture overview",
                "03_problem_definition.md": "Problem space analysis",
                "03_component_specification.md": "Component detailed specification",
                "04_product_definition.md": "Product definition and strategy",
                "04_database_design.md": "Database architecture and design",
                "04a_architecture_decision_record.md": "Architecture decisions tracking"
            },
            "product_planning": {
                "05_product_roadmap.md": "Product roadmap and timeline",
                "05_api_specification.md": "API design and specification",
                "05a_empathy_map.md": "User empathy mapping",
                "05b_customer_journey_map.md": "Customer journey analysis",
                "05c_user_stories.md": "User stories template",
                "05d_service_blueprint.md": "Service design blueprint",
                "05e_project_rules.md": "Project-specific rules"
            },
            "technical_implementation": {
                "06_frontend_architecture.md": "Frontend architecture design",
                "07_testing_strategy.md": "Testing approach and strategy",
                "08_devops_pipeline.md": "DevOps and CI/CD pipeline",
                "09_security_framework.md": "Security framework design",
                "10_documentation_framework.md": "Documentation structure"
            },
            "project_management": {
                "11_task_management.md": "Task tracking and management",
                "12_meeting_notes.md": "Meeting documentation",
                "13_project_progress.md": "Progress tracking template"
            }
        },
        "simplified_templates": {
            "quick_documentation": {
                "00_index.md": "Quick documentation index",
                "bug_documentation.md": "Bug report template",
                "feature_documentation.md": "Feature specification",
                "quick_task_documentation.md": "Quick task template",
                "source_verification_template.md": "Source verification"
            }
        },
        "template_hooks": {
            "pre_creation": ["validate_structure", "check_dependencies"],
            "post_creation": ["update_index", "notify_stakeholders"],
            "on_update": ["sync_related_docs", "update_memory"]
        }
    },
    "rules": [
        {
            "name": "project-overview",
            "description": "Project overview and structure",
            "patterns": ["**/*"],
            "instructions": [
                "# PAELLA DOC Documentation System",
                "",
                "PAELLA DOC is a documentation system that follows a MECE approach (Mutually Exclusive, Collectively Exhaustive) to ensure complete and non-redundant documentation.",
                "",
                "## Project Structure",
                "",
                "Documentation is organized in the following folders:",
                "```",
                "docs/[project-name]/",
                "├── definition/",
                "│   ├── problem_definition.md",
                "│   └── functional_requirements.md",
                "├── architecture/",
                "│   ├── technical_architecture.md",
                "│   └── security_architecture.md",
                "├── design/",
                "│   ├── workflow.md",
                "│   └── interface_design.md",
                "├── configuration/",
                "│   ├── configuration.md",
                "│   └── environment_setup.md",
                "├── guides/",
                "│   ├── development_guide.md",
                "│   ├── user_guide.md",
                "│   └── quickstart.md",
                "├── api/",
                "│   ├── api_reference.md",
                "│   └── api_guidelines.md",
                "├── quality/",
                "│   ├── test_plan.md",
                "│   └── quality_standards.md",
                "├── security/",
                "│   ├── security_requirements.md",
                "│   └── security_guidelines.md",
                "├── assets/",
                "├── references.md",
                "└── .memory.json",
                "```"
            ]
        },
        {
            "name": "documentation-phases",
            "description": "Documentation phases and processes",
            "patterns": ["**/*"],
            "instructions": [
                "# Documentation Phases",
                "",
                "1. Discovery Phase:",
                "   - Market research",
                "   - User research",
                "   - Competitive analysis",
                "   - Technology assessment",
                "",
                "2. Definition Phase:",
                "   - Problem definition",
                "   - Functional requirements",
                "   - Non-functional requirements",
                "   - Project scope",
                "   - Security requirements",
                "",
                "3. Design Phase:",
                "   - Technical architecture",
                "   - Security architecture",
                "   - Workflow design",
                "   - Interface design",
                "   - API design",
                "",
                "4. Implementation Phase:",
                "   - Development guides",
                "   - API documentation",
                "   - Test plans",
                "   - Security guidelines",
                "   - Quality standards",
                "",
                "5. Maintenance Phase:",
                "   - Documentation updates",
                "   - Version control",
                "   - Change management",
                "   - Security updates"
            ]
        },
        {
            "name": "documentation-conventions",
            "description": "Documentation conventions and standards",
            "patterns": ["**/*"],
            "instructions": [
                "# Documentation Conventions",
                "",
                "1. File names:",
                "   - snake_case for markdown files",
                "   - .md extension for documents",
                "   - YYYY-MM-DD prefix for versioned documents",
                "",
                "2. Metadata:",
                "   ```yaml",
                "   ---",
                "   title: Document Title",
                "   date: YYYY-MM-DD",
                "   author: Author Name",
                "   status: [Draft/In Review/Final]",
                "   version: X.Y",
                "   security_level: [Public/Internal/Confidential]",
                "   last_reviewed: YYYY-MM-DD",
                "   next_review: YYYY-MM-DD",
                "   tags: [array of relevant tags]",
                "   ---",
                "   ```",
                "",
                "3. References:",
                "   - APA format for citations",
                "   - Relative links between documents",
                "   - References section at the end",
                "   - Version control references",
                "",
                "4. Code Examples:",
                "   - Syntax highlighting",
                "   - Clear comments",
                "   - Version information",
                "   - Dependencies listed",
                "",
                "5. Security:",
                "   - No sensitive data",
                "   - Proper redaction",
                "   - Access levels marked"
            ]
        },
        {
            "name": "memory-system",
            "description": "Memory system for documentation process",
            "patterns": ["**/*"],
            "instructions": [
                "# Memory System",
                "",
                "Project memory is maintained in `.memory.json` with the following structure:",
                "",
                "```json",
                "{",
                "  \"project_name\": \"string\",",
                "  \"project_type\": \"string\",",
                "  \"language\": \"string\",",
                "  \"created_at\": \"YYYY-MM-DD\",",
                "  \"last_updated\": \"YYYY-MM-DD\",",
                "  \"category\": \"string\",",
                "  \"templates\": [\"array\"],",
                "  \"security_level\": \"string\",",
                "  \"progress\": {",
                "    \"current_phase\": \"string\",",
                "    \"completed_sections\": [\"array\"],",
                "    \"pending_sections\": [\"array\"],",
                "    \"blocked_sections\": [\"array\"]",
                "  },",
                "  \"collected_info\": {",
                "    \"section_name\": {",
                "      \"subsection\": [\"array\"],",
                "      \"security_requirements\": [\"array\"],",
                "      \"dependencies\": [\"array\"]",
                "    }",
                "  },",
                "  \"cursor_rules\": {",
                "    \"last_generated\": \"YYYY-MM-DD\",",
                "    \"rules_version\": \"string\",",
                "    \"active_rules\": [\"array\"],",
                "    \"custom_rules\": [\"array\"]",
                "  }",
                "}",
                "```"
            ]
        },
        {
            "name": "cursor-rules-generation",
            "description": "Rules for generating Cursor rules from documentation",
            "patterns": ["**/*"],
            "instructions": [
                "# Cursor Rules Generation",
                "",
                "1. Rule Sources:",
                "   - Architecture documents",
                "   - Quality standards",
                "   - Security guidelines",
                "   - Development guides",
                "   - Test plans",
                "",
                "2. Generation Process:",
                "   - Extract rules from documentation",
                "   - Validate rule consistency",
                "   - Apply security constraints",
                "   - Generate rule priorities",
                "   - Update existing rules",
                "",
                "3. Rule Categories:",
                "   - Architecture rules",
                "   - Development standards",
                "   - Security requirements",
                "   - Testing guidelines",
                "   - Documentation standards",
                "",
                "4. Rule Validation:",
                "   - Syntax check",
                "   - Conflict detection",
                "   - Security compliance",
                "   - Performance impact",
                "",
                "5. Rule Application:",
                "   - Project-wide rules",
                "   - Directory-specific rules",
                "   - File-type rules",
                "   - Security-level rules"
            ]
        },
        {
            "name": "conversation-workflow",
            "description": "Conversational workflow for documentation gathering",
            "patterns": ["**/*"],
            "instructions": [
                "# Conversational Documentation Workflow",
                "",
                "When invoked with just the command `PAELLA` (without parameters), PAELLADOC initiates an interactive conversational workflow:",
                "",
                "1. Initial Greeting and Purpose Explanation:",
                "   - Introduction as PAELLADOC system",
                "   - Explanation of the documentation process",
                "   - Overview of what information will be gathered",
                "",
                "2. Project Basics Conversation:",
                "   - Ask for project name if not provided",
                "   - Ask for project type (frontend, backend, etc.)",
                "   - Ask for project purpose and brief description",
                "   - Ask about target users and stakeholders",
                "",
                "3. Development Methodology Conversation:",
                "   - Ask about preferred development methodologies",
                "   - Ask about Git workflow preferences",
                "   - Ask about coding style preferences",
                "   - Ask about testing approach",
                "",
                "4. Documentation Scope Conversation:",
                "   - Ask about documentation depth needed",
                "   - Ask about documentation priorities",
                "   - Ask about existing documentation to incorporate",
                "   - Ask about confidentiality requirements",
                "",
                "5. Next Steps Guidance:",
                "   - Explain how to continue the documentation process",
                "   - Explain how to use the CONTINUE command",
                "   - Explain how to use other PAELLADOC commands",
                "   - Offer to start setting up the documentation structure",
                "",
                "PAELLADOC uses these conversations to gather essential information in a natural, human-friendly way, rather than requiring users to remember specific parameter formats."
            ]
        }
    ],
    "priorities": [
        {
            "source": "docs/*/architecture/",
            "weight": 3.0,
            "description": "Core technical and security architecture"
        },
        {
            "source": "docs/*/security/",
            "weight": 3.0,
            "description": "Security requirements and guidelines"
        },
        {
            "source": "docs/*/design/",
            "weight": 2.8,
            "description": "Workflow and interface design"
        },
        {
            "source": "docs/*/api/",
            "weight": 2.7,
            "description": "API documentation and guidelines"
        },
        {
            "source": "docs/*/definition/",
            "weight": 2.6,
            "description": "Problem and requirements definition"
        },
        {
            "source": "docs/*/quality/",
            "weight": 2.5,
            "description": "Testing and quality standards"
        },
        {
            "source": "docs/*/guides/",
            "weight": 2.3,
            "description": "Development and user guides"
        },
        {
            "source": "docs/*/configuration/",
            "weight": 2.0,
            "description": "System configuration and setup"
        },
        {
            "source": "docs/*/assets/",
            "weight": 1.5,
            "description": "Supporting assets and resources"
        },
        {
            "source": ".notes/",
            "weight": 3.0,
            "description": "Template and meta-documentation"
        }
    ],
    "project_directives": {
        "name": "PAELLADOC",
        "ai_first": true,
        "template_path": ".cursor/rules/templates/",
        "coding_styles_path": ".cursor/rules/templates/coding_styles/",
        "github_workflows_path": ".cursor/rules/templates/github-workflows/",
        "methodologies_path": ".cursor/rules/templates/methodologies/",
        "output_path": "docs/",
        "rules_path": ".cursor/rules/generated/",
        "timestamp_format": {
            "command": "date '+%Y-%m-%d'",
            "pattern": "YYYY-MM-DD"
        },
        "coding_styles": {
            "frontend": {
                "path": "coding_styles/frontend-react.md",
                "description": "Frontend development with React best practices",
                "tags": ["frontend", "react", "javascript", "typescript"]
            },
            "backend": {
                "path": "coding_styles/backend-node.md",
                "description": "Backend development with Node.js best practices",
                "tags": ["backend", "node", "javascript", "express"]
            },
            "chrome_extension": {
                "path": "coding_styles/chrome-extension.md",
                "description": "Chrome extension development best practices",
                "tags": ["browser", "extension", "javascript"]
            },
            "rails": {
                "path": "coding_styles/ruby-on-rails.md",
                "description": "Ruby on Rails development best practices",
                "tags": ["backend", "ruby", "rails", "mvc"]
            },
            "nextjs": {
                "path": "coding_styles/nextjs.md",
                "description": "Next.js development best practices",
                "tags": ["frontend", "react", "nextjs", "ssr", "typescript"]
            },
            "wordpress": {
                "path": "coding_styles/wordpress.md",
                "description": "WordPress development best practices",
                "tags": ["cms", "php", "wordpress", "themes", "plugins"]
            },
            "jenkins": {
                "path": "coding_styles/jenkins.md",
                "description": "Jenkins pipeline development best practices",
                "tags": ["ci/cd", "jenkins", "pipeline", "automation", "devops"]
            }
        },
        "methodologies": {
            "tdd": {
                "path": "methodologies/tdd-methodology.md",
                "description": "Test-Driven Development for AI agents",
                "tags": ["testing", "development", "AI", "automated"]
            },
            "bdd": {
                "path": "methodologies/bdd-methodology.md",
                "description": "Behavior-Driven Development for AI agents",
                "tags": ["testing", "behavior", "AI", "automated"]
            },
            "scrum": {
                "path": "methodologies/scrum.md",
                "description": "Scrum methodology for AI agents",
                "tags": ["agile", "process", "AI", "automated"]
            },
            "ci": {
                "path": "methodologies/continuous-integration.md",
                "description": "Continuous Integration for AI agents",
                "tags": ["devops", "integration", "AI", "automated"]
            },
            "pair": {
                "path": "methodologies/pair-programming.md",
                "description": "Pair Programming for AI agents",
                "tags": ["collaboration", "development", "AI", "automated"]
            }
        },
        "github_workflows": {
            "github_flow": {
                "path": "github-workflows/github-flow.md",
                "description": "GitHub Flow - simple branch-based workflow",
                "tags": ["github", "workflow", "simple", "branch-based"]
            },
            "gitflow": {
                "path": "github-workflows/gitflow.md",
                "description": "Gitflow - structured workflow with develop and release branches",
                "tags": ["git", "workflow", "release", "structured", "branching"]
            },
            "trunk_based": {
                "path": "github-workflows/trunk-based.md",
                "description": "Trunk-Based Development with feature flags",
                "tags": ["git", "workflow", "trunk", "continuous delivery", "feature flags"]
            },
            "no_workflow": {
                "path": "github-workflows/no-workflow.md",
                "description": "Simple Git usage without formal workflow",
                "tags": ["git", "simple", "solo", "direct"]
            }
        },
        "workflow_selector": {
            "path": "templates/workflow_selector.md",
            "auto_update": true,
            "selection_strategy": "project_characteristics"
        },
        "security": {
            "default_level": "internal",
            "check_secrets": true,
            "validate_access": true,
            "ai_security_review": true
        },
        "coding_style_workflow": {
            "selection_strategy": "project_type_first",
            "enable_customization": true,
            "style_application_process": [
                "determine_project_type",
                "identify_methodologies",
                "select_base_styles",
                "apply_methodology_styles",
                "resolve_conflicts",
                "generate_documentation",
                "update_mdc_references"
            ],
            "style_documentation": {
                "include_in_development_guide": true,
                "create_separate_style_guide": true,
                "link_from_architecture_doc": true
            },
            "style_selector": {
                "path": "templates/programming_style_selector.md",
                "auto_update": true
            }
        },
        "workflow_selection_process": {
            "selection_strategy": "team_size_and_deployment_frequency",
            "enable_customization": true,
            "workflow_application_process": [
                "determine_project_size",
                "identify_team_composition",
                "establish_deployment_frequency",
                "identify_special_requirements",
                "select_primary_workflow",
                "generate_workflow_documentation",
                "update_mdc_references"
            ],
            "workflow_documentation": {
                "include_in_development_guide": true,
                "create_git_workflow_guide": true,
                "link_from_onboarding_docs": true
            },
            "workflow_selector": {
                "path": "templates/workflow_selector.md",
                "auto_update": true
            }
        },
        "validation": {
            "check_links": true,
            "verify_metadata": true,
            "enforce_conventions": true,
            "documentation_structure": {
                "validate_mece": true,
                "check_completeness": true,
                "verify_links": true,
                "ensure_consistency": true
            }
        },
        "ai_agent": {
            "role": "software_construction_and_product_management",
            "capabilities": [
                "code_generation",
                "architecture_design",
                "product_strategy",
                "user_experience",
                "documentation",
                "quality_assurance"
            ],
            "learning": {
                "enabled": true,
                "feedback_loop": true,
                "pattern_recognition": true,
                "knowledge_base_update": true
            },
            "documentation_focus": {
                "architecture": 3.0,
                "security": 3.0,
                "design": 2.8,
                "api": 2.7,
                "definition": 2.6,
                "quality": 2.5,
                "guides": 2.3,
                "configuration": 2.0,
                "assets": 1.5
            }
        },
        "code_generation": {
            "enabled": true,
            "templates_path": ".cursor/rules/templates/code_generation/",
            "output_base_path": "../generated_code/",
            "github_integration": true,
            "code_types": {
                "frontend": {
                    "frameworks": ["react", "vue", "angular", "next"],
                    "templates": {
                        "component": "templates/code_generation/frontend/component.template",
                        "page": "templates/code_generation/frontend/page.template",
                        "hook": "templates/code_generation/frontend/hook.template",
                        "state": "templates/code_generation/frontend/state.template",
                        "styling": "templates/code_generation/frontend/styling.template"
                    }
                },
                "backend": {
                    "frameworks": ["express", "nestjs", "django", "flask", "spring"],
                    "templates": {
                        "controller": "templates/code_generation/backend/controller.template",
                        "model": "templates/code_generation/backend/model.template",
                        "service": "templates/code_generation/backend/service.template",
                        "router": "templates/code_generation/backend/router.template",
                        "middleware": "templates/code_generation/backend/middleware.template"
                    }
                },
                "extension": {
                    "frameworks": ["chrome-extension", "firefox-addon", "vscode-extension"],
                    "templates": {
                        "manifest": "templates/code_generation/extension/manifest.template",
                        "background": "templates/code_generation/extension/background.template",
                        "content": "templates/code_generation/extension/content.template",
                        "popup": "templates/code_generation/extension/popup.template",
                        "options": "templates/code_generation/extension/options.template"
                    }
                }
            },
            "test_generation": {
                "enabled": true,
                "frameworks": {
                    "javascript": ["jest", "mocha", "cypress"],
                    "python": ["pytest", "unittest"],
                    "java": ["junit", "mockito"],
                    "ruby": ["rspec", "minitest"]
                }
            },
            "documentation_extraction": {
                "extractors": [
                    {
                        "name": "architecture",
                        "source": ["architecture/*.md", "design/*.md"],
                        "output": "code_structure.json"
                    },
                    {
                        "name": "api",
                        "source": ["api/*.md"],
                        "output": "api_specification.json"
                    },
                    {
                        "name": "components",
                        "source": ["architecture/*components*.md", "design/*components*.md"],
                        "output": "components.json"
                    },
                    {
                        "name": "data_models",
                        "source": ["architecture/*database*.md", "*model*.md"],
                        "output": "data_models.json"
                    }
                ]
            },
            "repository_management": {
                "create_repo": true,
                "platforms": ["github", "gitlab", "local"],
                "ci_templates": {
                    "github": "templates/code_generation/ci/github_workflow.template",
                    "gitlab": "templates/code_generation/ci/gitlab_ci.template"
                },
                "readme_template": "templates/code_generation/readme.template",
                "license_templates": {
                    "MIT": "templates/code_generation/licenses/mit.template",
                    "Apache-2.0": "templates/code_generation/licenses/apache.template",
                    "GPL-3.0": "templates/code_generation/licenses/gpl3.template",
                    "BSD-3-Clause": "templates/code_generation/licenses/bsd3.template"
                }
            }
        }
    }
}